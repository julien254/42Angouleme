# Snip MAIN~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

snippet main "int main(int argc, char *argv[])"
int	main(int argc, char *argv[])
{
	(void)argc;
	(void)argv;
	${0:${VISUAL}}
	return (0);
}
endsnippet

# Snip VOID~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

snippet voidf "void NAME(ARG1, ARG2,.....)"
void	${1:NAME}(${2:void})
{
	${0:${VISUAL}}
}
endsnippet

# Snip INT~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

snippet intf "int NAME(ARG1, ARG2,.....)"
int	${1:NAME}(${2:void})
{
	${0:${VISUAL}}
	return (0);
}
endsnippet

snippet int*f "int *NAME(ARG1, ARG2,.....)"
int	*${1:NAME}(${2:void})
{
	${0:${VISUAL}}
	return ();
}
endsnippet

snippet int "int NAME;"
int	${1:NAME};
endsnippet

snippet int* "int *NAME;"
int	*${1:NAME};
endsnippet

# Snip CHAR~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

snippet charf "char NAME(ARG1, ARG2,.....)"
char	${1:NAME}(${2:void})
{
	${0:${VISUAL}}
	return (0);
}
endsnippet

snippet char*f "char *NAME(ARG1, ARG2,.....)"
char	*${1:NAME}(${2:void})
{
	${0:${VISUAL}}
	return ();
}
endsnippet

snippet char "int NAME;"
char	${1:NAME};
endsnippet

snippet char* "int *NAME;"
char	*${1:NAME};
endsnippet

# Snip IF~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

snippet if "if (COND)"
if (${1:COND})
{
	${0:${VISUAL}}
}
endsnippet

snippet ife "if/else (COND)"
if (${1:COND})
{
	${2:${VISUAL}}
}
else
{
	${0}
}
endsnippet

# Snip WHILE~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

snippet wh "while (COND)"
${1:i = 0;}
while (${2:COND})
{
	${0:${VISUAL}}
}
endsnippet

# Snip Include Alias~~~~~~~~~~~~~~~~~~~~~~~~~~~~

snippet unistd "include <unistd.h>"
#include <unistd.h>
endsnippet

snippet stdio "include <stdio.h>"
#include <stdio.h>
endsnippet

snippet  stdlib "include <stdlib.h>"
#include <stdlib.h>
endsnippet

snippet  libft "include libft.h"
#include "libft.h"
endsnippet

snippet  stddef "include <stddef.h>"
#include <stddef.h>
endsnippet
## ___________________________ Snip FONCTIONS ________________________ ##

# Snip libc~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

snippet wr "write(1, &c ,1)"
write(${1:1}, ${2:${VISUAL}}, ${0:1});
endsnippet

## ______________________ Snip Full FONCTIONS / CALL ___________________ ##

# Snip ft_lib~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

snippet ftpcf "void ft_puchar(char c)"

void	ft_putchar(char c)
{
	write(1, &c, 1);
}

endsnippet

snippet ftpc "void ft_putchar(char c)"
ft_putchar(${0:char c});
endsnippet

snippet ftpnf "void ft_putnbr(int nb)"

void	ft_putnbr(int nb)
{
	unsigned int	nbr;
	if (nb < 0)
	{
		ft_putchar('-');
		nbr = nb * -1;
	}
	else
		nbr = nb;
	if (nbr < 10)
	{
		ft_putchar('0' + nbr);
	}
	else
	{
		ft_putnbr(nbr / 10);
		ft_putchar('0' + nbr % 10);
	}
}

endsnippet

snippet ftpn "void ft_putnbr(int nb)"
ft_putnbr(${0:int nb});
endsnippet

snippet ftswf "void ft_swap(int *a, int *b)"

void	ft_swap(int *a, int *b)
{
	int	c;

	c = *a;
	*a = *b;
	*b = c;
}

endsnippet

snippet ftsw "void ft_swap(int *a, int *b)"
ft_swap(${1:int *a}, ${0:int *b});
endsnippet

snippet ftdiv "void ft_div(int *a, int *b)"

void	ft_ultimate_div_mod(int *a, int *b)
{
	int a_temp;
	int	b_temp;

	a_temp = *a;
	b_temp = *b;
	*a = a_temp / b_temp;
	*b = a_temp % b_temp;
}

endsnippet

snippet ftdiv "void ft_div(int *a, int *b)"
ft_div(${1:int *}a, ${0:int *b});
endsnippet

snippet ftpsf "void ft_putstr(char *str)"

void	ft_putstr(char *str)
{
	write(1, str, ft_strlen(str));
}

endsnippet

snippet ftps "void ft_putstr(char *str)"
ft_putstr(${0:char *str});
endsnippet

snippet ftslf "int ft_strlen(char *str)"

int	ft_strlen(char *str)
{
	int	i;

	i = 0;
	while (str[i])
		i++;
	return (i);
}

endsnippet

snippet ftsl "int ft_strlen(char *str)"
ft_strlen(${0:char *str});
endsnippet

snippet ftptf "void ft_put_tab(int *tab, int size)"

void	ft_put_tab(int *tab, int size)
{
	int	i;

	i = 0;
	while (i < size)
	{
		ft_putnbr(tab[i]);
		if (i == size - 1)
			ft_putchar('.');
		else
			ft_putchar(',');
		i++;
	}
	ft_putchar('\n');
}

endsnippet

snippet ftpt "void ft_put_tab(int *tab, int size)"
ft_put_tab(${1:int *tab}, ${0:int size});
endsnippet

snippet ftsdupf "char	*ft_strdup(char *src)\nAttention aux free"

char	*ft_strdup(char *src)
{
	int		i;
	char	*str;
	str = (char *)malloc(sizeof(*str) * (ft_strlen(src) + 1));
	i = 0;
	while (src[i])
	{
		str[i] = src[i];
		i++;
	}
	str[i] = '\0';
	return (str);
}

endsnippet

snippet ftsdup "char	*ft_strdup(char *src)\nAttention aux free"
ft_strdup(${0:char *src});
endsnippet
